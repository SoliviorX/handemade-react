(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.react = factory());
})(this, (function () { 'use strict';

	// 判断当前环境是否支持 Symbol：Symbol是构造函数；Symbol.for(key)通过key找到对应的symbol值，如果没找到则通过该key创建一个symbol值。
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7; // 不支持 Symbol 则将reactElementType设为一个数字

	/**
	 * 1. react17 以前会用 React.createElement 执行运行时；react17 以后会用 jsx方法执行运行时；
	 * 2. 编译时由babel编译实现，我们来实现运行时，工作量包括：
	    + 实现jsx方法
	    + 实现打包流程
	    + 实现调试打包结果的环境
	 */
	// ReactElement 是 jsx 执行的返回结果
	const ReactElement = function (type, key, ref, props) {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'solivior' // 为了将自己的react与官方的react区分开，增加一个标识
	    };
	    return element;
	};
	// jsxDEV 是开发环境的jsx方法
	const jsxDEV = (type, config) => {
	    let key = null;
	    const props = {};
	    let ref = null;
	    // 处理 jsx 的第二个参数 config
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                // 将它变成字符串
	                key = '' + val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	// React
	var index = {
	    version: '0.0.0',
	    createElement: jsxDEV
	};

	return index;

}));
